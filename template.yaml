AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31

Description: Bot to track team rating on rating.chgk.info and perform some routine tasks.

Parameters:
  # Telegram bot token value
  # See https://core.telegram.org/bots#3-how-do-i-create-a-bot for details
  TelegramBotToken:
    Type: String
    Description: Token to use for communication with Telegram severs
    NoEcho: true

  # Will use SecretsManager if value set to true.
  # Set this to true only in case you really need such security level.
  KeepTokensSecret:
    Type: String
    Description: |-
      Set to true to store Telegram token in SecretsManager. Will be stored as Environment variable else.
    AllowedValues:
      - 'true'
      - 'false'
    Default: 'false'

  # Setting this variable to false will deny users from configuring team tracking by bot commands.
  # In that case bot owner will have to create records in DynamoDB manually.
  #   Record example: { 'chat_id' => 123456789, 'team_id' => 1 }
  #   chat_id is Telegram ID of chat to sent statistics to. team_id is team ID on rating.chgk.net
  AllowSelfRegistration:
    Type: String
    Description: Set this to false to deny /watch and /unwatch bot commands
    AllowedValues: 
      - 'true'
      - 'false'
    Default: 'true'

Conditions:
  # Secure Storage with all required policy rules will be created
  KeepTokenSecretCond: !Equals
    - !Ref KeepTokensSecret
    - 'true'

  # Environment variable will be created to keep token
  KeepTokenEnvCond: !Not
    - Condition: KeepTokenSecretCond

Globals:
  Function:
    CodeUri: bot/
    Runtime: ruby3.2
    Environment:
      Variables:
        TELEGRAM_TOKEN: !If
          - KeepTokenEnvCond
          - !Ref TelegramBotToken
          - !Ref AWS::NoValue
        SECRET_NAME: !If
          - KeepTokenSecretCond
          - !Ref SecretStorage
          - !Ref AWS::NoValue
        DYNAMO_TABLE: !Ref ChatDBTable

Resources:
  SecretStorage:
    Type: AWS::SecretsManager::Secret
    Condition: KeepTokenSecretCond
    Properties:
      SecretString: !Ref TelegramBotToken

  ChatDBTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      PrimaryKey:
        Name: chat_id
        Type: Number
      ProvisionedThroughput:
        ReadCapacityUnits: 10
        WriteCapacityUnits: 10

  StatsSqsQueue:
    Type: AWS::SQS::Queue
    Properties:
      MessageRetentionPeriod: 3600
      VisibilityTimeout: 450

  # Using Makefile here because of bug https://github.com/aws/aws-lambda-builders/issues/177
  BotLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      ContentUri: layer
      CompatibleRuntimes:
        - ruby3.2
      RetentionPolicy: Delete
    Metadata:
      BuildMethod: makefile

  WatchVenuesFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: venues.handler
      Timeout: 400
      Layers:
        - !Ref BotLayer
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ChatDBTable
        - !If
          - KeepTokenSecretCond
          - AWSSecretsManagerGetSecretValuePolicy:
              SecretArn: !Ref SecretStorage
          - !Ref AWS::NoValue
      Events:
        DailyCheckEvent:
          Type: Schedule
          Properties:
            Schedule: cron(15 6 ? * * *)
  WatchVenuesLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${WatchVenuesFunction}"
      RetentionInDays: 14

  TriggerStatsFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: stats.initiate
      Timeout: 30
      Layers:
        - !Ref BotLayer
      Environment:
        Variables:
          SQS_QUEUE_URL: !Ref StatsSqsQueue
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref ChatDBTable
        - SQSSendMessagePolicy:
            QueueName: !GetAtt StatsSqsQueue.QueueName
      Events:
        WeeklyScheduleEvent:
          Type: Schedule
          Properties:
            Schedule: cron(59 15 ? * MON *)
  TriggerStatsLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${TriggerStatsFunction}"
      RetentionInDays: 14

  SendStatsFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: stats.weekly
      Timeout: 600
      MemorySize: 512
      Layers:
        - !Ref BotLayer
      Policies:
        - SQSPollerPolicy:
            QueueName: !GetAtt StatsSqsQueue.QueueName
        - !If
          - KeepTokenSecretCond
          - AWSSecretsManagerGetSecretValuePolicy:
              SecretArn: !Ref SecretStorage
          - !Ref AWS::NoValue
      Events:
        StatSQSEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt StatsSqsQueue.Arn
            BatchSize: 1
  SendStatsLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${SendStatsFunction}"
      RetentionInDays: 14

  SendPollsFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: polls.create_polls
      Timeout: 300
      Layers:
        - !Ref BotLayer
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ChatDBTable
        - !If
          - KeepTokenSecretCond
          - AWSSecretsManagerGetSecretValuePolicy:
              SecretArn: !Ref SecretStorage
          - !Ref AWS::NoValue
      Events:
        WeeklyScheduleEvent:
          Type: Schedule
          Properties:
            Schedule: cron(59 7 ? * * *)
  SendPollsLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${SendPollsFunction}"
      RetentionInDays: 14

  CleanupPinnedFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: main.unpin_messages
      Timeout: 30
      Layers:
        - !Ref BotLayer
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ChatDBTable
        - !If
          - KeepTokenSecretCond
          - AWSSecretsManagerGetSecretValuePolicy:
              SecretArn: !Ref SecretStorage
          - !Ref AWS::NoValue
      Events:
        DailyCleanupEvent:
          Type: Schedule
          Properties:
            Schedule: cron(30 18 ? * * *)
  CleanupPinnedLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${CleanupPinnedFunction}"
      RetentionInDays: 14

  ProcessCommandFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: main.message_handler
      Timeout: 30
      Layers:
        - !Ref BotLayer
      Environment:
        Variables:
          ALLOW_SELF_REGISTRATION: !Ref AllowSelfRegistration
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ChatDBTable
        - !If
          - KeepTokenSecretCond
          - AWSSecretsManagerGetSecretValuePolicy:
              SecretArn: !Ref SecretStorage
          - !Ref AWS::NoValue
      Events:
        TelegramWebHook:
          Type: Api
          Properties:
            Auth:
              ResourcePolicy:
                CustomStatements:
                  - Effect: "Allow"
                    Principal: "*"
                    Action: "execute-api:Invoke"
                    Resource: "execute-api:/*/*/*"
                  - Effect: "Deny"
                    Principal: "*"
                    Action: "execute-api:Invoke"
                    Resource: "execute-api:/*/*/*"
                    Condition:
                      NotIpAddress:
                        "aws:SourceIp":
                          # CIDR list is taken from https://core.telegram.org/bots/webhooks
                          - 149.154.160.0/20
                          - 91.108.4.0/22
            Path: '/hook'
            Method: post
  ProcessCommandLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${ProcessCommandFunction}"
      RetentionInDays: 14

Outputs:
  # API endpoint URL
  TelegramWebHookApi:
    Description: "WebHook URL"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/hook/"

  # CURL command to setup webhook
  SetWebhookCommand:
    Description: "Use this command to set WebHook"
    Value: !Sub "curl -F \"url=https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/hook/\" https://api.telegram.org/bot${TelegramBotToken}/setWebhook"
